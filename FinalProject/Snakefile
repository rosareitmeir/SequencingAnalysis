#load samples into table
import pandas as pd
import os
#relative to working directory
configfile: "config/config.yaml"

samples = pd.read_csv(config["samples"], index_col="sample", sep='\t')

wgs_path = config["wgs_data"]
wgs_name = os.path.basename(wgs_path)
numbers=[1,2] # to index through the two fastq files

cont_table = pd.DataFrame()
if os.path.isfile(config["contaminations"]):
	cont_table=pd.read_csv(config["contaminations"], index_col="name", sep="\t")

def get_contamination(wildcards):
	cont=wildcards.cont
	path=cont_table.loc[cont][0]
	return path

def get_fastq_pair1(wildcards):
	sample = wildcards.sample
	r1 = samples.loc[sample][0]
	return r1

def get_fastq_pair2(wildcards):
	sample = wildcards.sample
	r2 = samples.loc[sample][1]
	return r2

def get_fq1_for_downstream(wildcards):
	if config["use_trimmed"]:
		#return wildcards.sample
		return ["results/trimmed/"+ wildcards.sample + "_1.fastq"]
	else:
		return [str(samples.loc[wildcards.sample][0])]

def get_fq2_for_downstream(wildcards):
	if config["use_trimmed"]:
		#return wildcards.sample
		return [ "results/trimmed/"+ wildcards.sample + "_2.fastq"]
	else:
		return [str(samples.loc[wildcards.sample][1])]

def get_fqs_for_downstream(wildcards):
	if config["use_trimmed"]:
		return ["results/trimmed/" + wildcards.sample + "_1.fastq", "results/trimmed/" + wildcards.sample + "_2.fastq"]
	else:
		return [samples.loc[wildcards.sample][0], samples.loc[wildcards.sample][1]]




#include: "rules/reference_mapping.smk"
#include: "rules/qc_preprocessing.smk"  #quality control
include: "rules/assembly.smk" #de novo assembly with qc, preprocessing,...
#include: "rules/obtaining_geneseq.smk"
include: "rules/screen.smk"

rule all:
	input:
		"results/qc/wgs/multiqc_report.html",
		"results/assembly/megahit/" + wgs_name + "/done",
		"results/assembly/pilon/"+ wgs_name + ".fasta",
		"results/assembly/annotation/" + wgs_name + ".gff",
		"results/qc/wgs/multiqc_report.html"
		## either de novo if reference file is not given otherwise STAR and featurecounts
		#"results/gene_sequences/gene_list.tsv",
		#expand( "results/gene_sequences/{sample}.tsv", sample= list(samples.index))


