#load samples into table
import pandas as pd
import os
#relative to working directory
configfile: "config/config.yaml"

samples = pd.read_csv(config["samples"], sep='\t' )
samples['sample'] = samples['sample'].astype(str)
samples.set_index('sample', inplace=True)

wgs_path = config["wgs_data"]
wgs_name = os.path.basename(wgs_path)
numbers=[1,2] # to index through the two fastq files

ref_path = config["ref"] if os.path.exists(config["ref"]) else "" 

anno_file = os.path.basename(config["ref_anno"]) if os.path.exists(config["ref_anno"]) else "None" #TODO check it works in all cases 
anno_basename = os.path.splitext(anno_file)[0] if os.path.exists(config["ref_anno"]) else "None" #get basename of annotation file, to convert to gff

# Path and basefilename for contaminations.fa, place bowtie index in the same location with basename
cont_path = os.path.dirname(config["contaminations"])
cont_name = os.path.basename(cont_path)

def get_fastq_pair1(wildcards):
	sample = wildcards.sample
	r1 = samples.loc[sample][0]
	return r1

def get_fastq_pair2(wildcards):
	sample = wildcards.sample
	r2 = samples.loc[sample][1]
	return r2

def get_fq1_for_downstream(wildcards):
	if config["RNA_trimmed"]:
		#return wildcards.sample
		return ["results/trimmed/RNA_seq/"+ wildcards.sample + "_1.fastq"]
	else:
		return [str(samples.loc[wildcards.sample][0])]

def get_fq2_for_downstream(wildcards):
	if config["RNA_trimmed"]:
		#return wildcards.sample
		return [ "results/trimmed/RNA_seq/"+ wildcards.sample + "_2.fastq"]
	else:
		return [str(samples.loc[wildcards.sample][1])]

def get_fqs_for_downstream(wildcards):
	if config["RNA_trimmed"]:
		return ["results/trimmed/RNA_seq/" + wildcards.sample + "_1.fastq", "results/trimmed/RNA_seq/" + wildcards.sample + "_2.fastq"]
	else:
		return [samples.loc[wildcards.sample][0], samples.loc[wildcards.sample][1]]




include: "rules/reference_mapping.smk"
include: "rules/assembly.smk" #de novo assembly with qc, preprocessing,...
include: "rules/screen.smk"
include: "rules/obtaining_geneseq.smk"
include: "rules/phylo_tree.smk" # + MSA + tree generation
include: "rules/DEG_analysis.smk"

wildcard_constraints:
    sample = "|".join(list(samples.index)),

rule all:
	input:
		# results od downstream analysis:
		"results/toytree/tree_plot.pdf",
		"results/DGEAnalysis/volcano.pdf",
		# multi qc reports
		"results/qc/RNA_seq/multiqc_report.html" if os.path.exists(config["ref"]) else ["results/qc/wgs/multiqc_report.html", "results/qc/RNA_seq/multiqc_report.html" ,"results/qc/busco/txome_busco/prok"]




