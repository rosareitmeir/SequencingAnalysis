#load samples into table
import pandas as pd
import os
#relative to working directory
configfile: "config/config.yaml"

samples = pd.read_csv(config["samples"], index_col="sample", sep='\t')

wgs_path = config["wgs_data"]
wgs_name = os.path.basename(wgs_path)
numbers=[1,2] # to index through the two fastq files

cont_table = pd.DataFrame()
if os.path.isfile(config["contaminations"]):
	cont_table=pd.read_csv(config["contaminations"], index_col="name", sep="\t")

def get_contamination(wildcards):
	cont=wildcards.cont
	path=cont_table.loc[cont][0]
	return path

def get_fastq_pair1(wildcards):
	sample = wildcards.sample
	r1 = samples.loc[sample][0]
	return r1

def get_fastq_pair2(wildcards):
	sample = wildcards.sample
	r2 = samples.loc[sample][1]
	return r2

def get_fq1_for_downstream(wildcards):
	if config["use_trimmed"]:
		#return wildcards.sample
		return ["results/trimmed/RNA_seq/"+ wildcards.sample + "_1.fastq"]
	else:
		return [str(samples.loc[wildcards.sample][0])]

def get_fq2_for_downstream(wildcards):
	if config["use_trimmed"]:
		#return wildcards.sample
		return [ "results/trimmed/RNA_seq/"+ wildcards.sample + "_2.fastq"]
	else:
		return [str(samples.loc[wildcards.sample][1])]

def get_fqs_for_downstream(wildcards):
	if config["use_trimmed"]:
		return ["results/trimmed/RNA_seq/" + wildcards.sample + "_1.fastq", "results/trimmed/RNA_seq/" + wildcards.sample + "_2.fastq"]
	else:
		return [samples.loc[wildcards.sample][0], samples.loc[wildcards.sample][1]]




include: "rules/reference_mapping.smk"
include: "rules/assembly.smk" #de novo assembly with qc, preprocessing,...
include: "rules/screen.smk"
#include: "rules/phylogenetic.smk" # with gene sequence obtaining + MSA + tree generation
#include: "rules/DEG_analysis.smk"


rule all:
	input:
		"results/qc/RNA_seq/multiqc_report.html" if os.path.exists(config["ref"]) else ["results/qc/wgs/multiqc_report.html", "results/qc/RNA_seq/multiqc_report.html" ],
		multiext("results/featurecounts/allsamples", ".featureCounts", ".featureCounts.summary", ".featureCounts.jcounts")



